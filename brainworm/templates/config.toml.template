# Brainworm Configuration Template
# This file contains the core DAIC workflow and brainworm settings.
#
# NOTE: Multi-project event aggregation settings (sources, harvesting) belong in
# nautiloid's configuration, not here. Brainworm focuses on single-project
# DAIC enforcement and local event storage.

[daic]
enabled = true
default_mode = "discussion"
trigger_phrases = [ "make it so", "run that", "go ahead", "ship it", "let's do it", "execute", "implement it",]
blocked_tools = [ "Edit", "Write", "MultiEdit", "NotebookEdit",]

[daic.read_only_bash_commands]
basic = [ "ls", "ll", "pwd", "cd", "echo", "cat", "head", "tail", "less", "more", "grep", "rg", "find", "fd", "which", "whereis", "type", "file", "stat", "du", "df", "tree", "basename", "dirname", "realpath", "readlink", "whoami", "env", "printenv", "date", "cal", "uptime", "wc", "cut", "sort", "uniq", "comm", "diff", "cmp", "md5sum", "sha256sum",]
git = [ "git status", "git log", "git diff", "git show", "git branch", "git remote", "git fetch", "git describe", "git rev-parse", "git blame",]
docker = [ "docker ps", "docker images", "docker logs",]
package_managers = [ "npm list", "npm ls", "pip list", "pip show", "yarn list",]
network = [ "curl", "wget", "ping", "nslookup", "dig",]
text_processing = [ "jq", "awk", "sed -n",]
testing = [ "pytest", "python -m pytest", "python -m unittest", "uv run pytest", "npm test", "npm run test", "yarn test", "yarn run test", "npx jest", "npx vitest", "pnpm test", "pnpm run test", "cargo test", "go test", "mvn test", "gradle test", "rake test", "mix test", "dotnet test", "rspec", "make test",]

# Debug logging configuration
# Controls debug output behavior for all brainworm hooks and utilities
[debug]
# Master switch for debug output (false = disabled, true = enabled)
# Can be overridden temporarily with --verbose CLI flag
enabled = false

# Debug level controls verbosity (ERROR, WARNING, INFO, DEBUG, TRACE)
# - ERROR: Only errors
# - WARNING: Errors + warnings
# - INFO: Normal operations (default)
# - DEBUG: Detailed debugging information
# - TRACE: Everything including internal state
level = "INFO"

# Global default format for debug output ("text" or "json")
# - text: Human-readable format with timestamps
# - json: Machine-parseable JSONL format (one JSON object per line)
# Can be overridden per output destination below
format = "text"

# Control where debug output goes
[debug.outputs]
# Print debug messages to stderr (recommended for immediate feedback)
stderr = true
# Format for stderr output (overrides global format if set)
stderr_format = "text"

# Write debug messages to .brainworm/logs/debug.{log,jsonl}
# File extension is automatically chosen based on format:
# - "text" format → debug.log
# - "json" format → debug.jsonl
file = false
# Format for file output (overrides global format if set)
file_format = "json"

# Write framework-specific debug to .brainworm/logs/debug_framework_output.{log,jsonl}
# Captures JSON communication between hooks and Claude Code
# File extension is automatically chosen based on format
framework = false
# Format for framework output (overrides global format if set)
framework_format = "json"

# GitHub integration configuration
# Enables linking tasks to GitHub issues and manual session summary posting
[github]
# Master switch for GitHub integration (false = disabled, true = enabled)
# Requires gh CLI to be installed and authenticated
enabled = false

# Automatically link tasks to issues when task name contains issue reference (e.g., "fix-bug-#123")
# When true, brainworm detects "#123" patterns in task names and links automatically
auto_link_issues = true

# Automatically create GitHub issue when creating a task (without prompting)
# WARNING: Setting this to true will create issues for every task
# Recommended to keep false and use --create-issue flag when needed
create_issue_on_task = false

# To post session summaries to GitHub:
# 1. During session: Ask Claude to use session-docs agent to create memory file
# 2. When ready: Run `./tasks summarize` to post rich summary to linked GitHub issue
